{"version":3,"sources":["components/forms/custom-elements/CustomCheckbox.js","views/form-layouts/FormWizard.js"],"names":["BpIcon","styled","theme","borderRadius","width","height","boxShadow","palette","mode","backgroundColor","outline","outlineOffset","primary","background","BpCheckedIcon","display","backgroundImage","content","CustomCheckbox","bgcolor","props","disableRipple","color","checkedIcon","sx","icon","inputProps","steps","FormWizard","React","useState","activeStep","setActiveStep","Set","skipped","setSkipped","isStepOptional","step","isStepSkipped","has","title","description","map","label","index","stepProps","labelProps","optional","variant","completed","length","m","p","flexDirection","flex","onClick","htmlFor","id","size","fullWidth","mt","mb","type","multiline","rows","control","defaultChecked","handleSteps","disabled","prevActiveStep","mr","Error","prevSkipped","newSkipped","values","add","delete"],"mappings":"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","file":"static/js/63.c416a49e.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BpIcon = styled('span')(({ theme }) => ({\r\n  borderRadius: 3,\r\n  width: 21,\r\n  height: 21,\r\n\r\n  boxShadow:\r\n    theme.palette.mode === 'dark'\r\n      ? '0 0 0 1px rgb(16 22 26 / 40%)'\r\n      : 'inset 0 0 0 1px rgba(0,0,0,.2)',\r\n  backgroundColor: theme.palette.mode === 'dark' ? 'rgba(0,0,0,0.4)' : '',\r\n\r\n  '.Mui-focusVisible &': {\r\n    outline: '0px auto rgba(19,124,189,.6)',\r\n    outlineOffset: 2,\r\n  },\r\n  'input:hover ~ &': {\r\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.primary : theme.palette.primary,\r\n  },\r\n  'input:disabled ~ &': {\r\n    boxShadow: 'none',\r\n    background: theme.palette.mode === 'dark' ? 'rgba(57,75,89,.5)' : 'rgba(206,217,224,.5)',\r\n  },\r\n}));\r\n\r\nconst BpCheckedIcon = styled(BpIcon)({\r\n  boxShadow: 'none',\r\n  width: 21,\r\n  height: 21,\r\n  '&:before': {\r\n    display: 'block',\r\n    width: 21,\r\n    height: 21,\r\n    backgroundImage:\r\n      \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n      \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n      \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n    content: '\"\"',\r\n  },\r\n});\r\n\r\n// Inspired by blueprintjs\r\nfunction CustomCheckbox({ bgcolor, ...props }) {\r\n  return (\r\n    <Checkbox\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={\r\n        <BpCheckedIcon\r\n          sx={{\r\n            backgroundColor: bgcolor || 'primary.main',\r\n          }}\r\n        />\r\n      }\r\n      icon={<BpIcon />}\r\n      inputProps={{ 'aria-label': 'Checkbox demo' }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nCustomCheckbox.propTypes = {\r\n  bgcolor: PropTypes.string,\r\n};\r\n\r\nexport default CustomCheckbox;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport PageContainer from '../../components/container/PageContainer';\r\nimport Breadcrumb from '../../layouts/full-layout/breadcrumb/Breadcrumb';\r\n\r\nimport CustomTextField from '../../components/forms/custom-elements/CustomTextField';\r\nimport CustomCheckbox from '../../components/forms/custom-elements/CustomCheckbox';\r\nimport CustomFormLabel from '../../components/forms/custom-elements/CustomFormLabel';\r\n\r\nconst steps = ['Account', 'Profile', 'Finish'];\r\n\r\nconst FormWizard = () => {\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n  const isStepOptional = (step) => step === 1;\r\n\r\n  const isStepSkipped = (step) => skipped.has(step);\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  const handleSteps = (step) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Box sx={{ p: 3 }}>\r\n            <CustomFormLabel htmlFor=\"Name\">Name</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Name\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n            <CustomFormLabel htmlFor=\"Email\">Email</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Email\"\r\n              size=\"small\"\r\n              type=\"email\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n            <CustomFormLabel htmlFor=\"Password\">Password</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Password\"\r\n              size=\"small\"\r\n              type=\"password\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n          </Box>\r\n        );\r\n      case 1:\r\n        return (\r\n          <Box sx={{ p: 3 }}>\r\n            <CustomFormLabel htmlFor=\"Fname\">First Name</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Fname\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n            <CustomFormLabel htmlFor=\"Lname\">Last Name</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Lname\"\r\n              size=\"small\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n            <CustomFormLabel htmlFor=\"Address\">Address</CustomFormLabel>\r\n            <CustomTextField\r\n              id=\"Address\"\r\n              multiline\r\n              rows={4}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              sx={{ mt: 1, mb: 3 }}\r\n            />\r\n          </Box>\r\n        );\r\n      case 2:\r\n        return (\r\n          <Box sx={{ p: 3 }}>\r\n            <Typography variant=\"h5\">Terms and condition</Typography>\r\n            <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n              Sard about this site or you have been to it, but you cannot figure out what it is or\r\n              what it can do. MTA web directory isSard about this site or you have been to it, but\r\n              you cannot figure out what it is or what it can do. MTA web directory is\r\n            </Typography>\r\n            <FormControlLabel\r\n              control={<CustomCheckbox defaultChecked />}\r\n              label=\"Agree with terms?\"\r\n            />\r\n          </Box>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n  return (\r\n    <PageContainer>\r\n      <Breadcrumb title=\"Form Wizard\" description=\"this is Form Wizard page\" />\r\n      <Card>\r\n        <Box sx={{ width: '100%' }}>\r\n          <Stepper activeStep={activeStep}>\r\n            {steps.map((label, index) => {\r\n              const stepProps = {};\r\n              const labelProps = {};\r\n              if (isStepOptional(index)) {\r\n                labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n              }\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = false;\r\n              }\r\n              return (\r\n                <Step key={label} {...stepProps}>\r\n                  <StepLabel {...labelProps}>{label}</StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n          {activeStep === steps.length ? (\r\n            <>\r\n              <Box sx={{ m: 3, p: 2, backgroundColor: 'primary.light', borderRadius: 1 }}>\r\n                All steps completed - you&apos;re finished\r\n              </Box>\r\n\r\n              <Box display=\"flex\" sx={{ flexDirection: 'row', p: 3 }}>\r\n                <Box sx={{ flex: '1 1 auto' }} />\r\n                <Button onClick={handleReset} variant=\"contained\" color=\"error\">\r\n                  Reset\r\n                </Button>\r\n              </Box>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Box>{handleSteps(activeStep)}</Box>\r\n\r\n              <Box display=\"flex\" sx={{ flexDirection: 'row', p: 3 }}>\r\n                <Button\r\n                  color=\"inherit\"\r\n                  variant=\"contained\"\r\n                  disabled={activeStep === 0}\r\n                  onClick={handleBack}\r\n                  sx={{ mr: 1 }}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Box sx={{ flex: '1 1 auto' }} />\r\n                {isStepOptional(activeStep) && (\r\n                  <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\r\n                    Skip\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  onClick={handleNext}\r\n                  variant=\"contained\"\r\n                  color={activeStep === steps.length - 1 ? 'success' : 'secondary'}\r\n                >\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button>\r\n              </Box>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Card>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default FormWizard;\r\n"],"sourceRoot":""}