{"version":3,"sources":["components/custom-scroll/Scrollbar.js","redux/chats/Action.js","components/apps/chats/ChatListing.js","components/apps/chats/ChatSidebar.js","components/apps/chats/ChatContent.js","components/apps/chats/ChatMsgSent.js","views/apps/chats/Chats.js"],"names":["Scrollbar","forwardRef","props","ref","children","other","test","navigator","userAgent","sx","overflowX","sendMsg","id","chatMsg","type","MSG_SUBMIT","ChatListing","dispatch","useDispatch","activeChat","useSelector","state","chatReducer","chatContent","useEffect","axios","get","then","response","FETCH_CHAT_SUCCESS","chats","data","catch","err","cSearch","filter","t","name","toLocaleLowerCase","includes","filterChats","chatSearch","Box","p","pt","pb","CustomTextField","placeholder","size","variant","inputProps","fullWidth","onChange","e","searchTerm","target","value","SEARCH_USER","Divider","List","height","lg","sm","map","chat","ListItem","button","alignItems","onClick","SELECTED_CHAT","selected","ListItemAvatar","Avatar","alt","src","thumb","ListItemText","primary","secondary","excerpt","ChatSidebar","isMobileSidebarOpen","onSidebarClose","useMediaQuery","theme","breakpoints","up","Drawer","width","flexShrink","position","open","onClose","zIndex","paddingTop","ChatContent","toggleChatSidebar","chatDetails","display","xs","md","mr","icon","dense","disableGutters","Typography","status","style","Object","keys","chatHistory","key","k","flexDirection","className","v","mb","backgroundColor","borderRadius","color","palette","mode","ml","varient","ChatMsgSent","useState","msg","setMsg","onSubmit","preventDefault","stopPropagation","bind","IconButton","disabled","Chats","setMobileSidebarOpen","PageContainer","title","description","Breadcrumb","subtitle","Card","flexGrow"],"mappings":"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","file":"static/js/61.269442b4.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { Box } from '@mui/material';\r\n\r\nconst Scrollbar = forwardRef((props, ref) => {\r\n  const { children, ...other } = props;\r\n\r\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent,\r\n  );\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <Box ref={ref} sx={{ overflowX: 'auto' }}>\r\n        {children}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PerfectScrollbar ref={ref} {...other}>\r\n      {children}\r\n    </PerfectScrollbar>\r\n  );\r\n});\r\n\r\nScrollbar.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Scrollbar;\r\n","import axios from 'axios';\r\nimport { SELECTED_CHAT, SEARCH_USER, MSG_SUBMIT, FETCH_CHAT_SUCCESS } from '../constants';\r\n\r\nexport const fetchChats = () => (dispatch) => {\r\n  axios\r\n    .get('/api/data/chat/ChatData')\r\n    .then((response) => {\r\n      dispatch({\r\n        type: FETCH_CHAT_SUCCESS,\r\n        chats: response.data,\r\n      });\r\n    })\r\n    .catch((err) => err);\r\n};\r\n\r\n// ///////////////////////////////////////////\r\n// Axios part Reducers\r\n// //////////////////////////////////////////\r\n\r\nexport const fetchChatsSuccess = (chats) => ({\r\n  type: FETCH_CHAT_SUCCESS,\r\n  payload: chats,\r\n});\r\n\r\nexport const openChat = (id) => ({\r\n  type: SELECTED_CHAT,\r\n  id,\r\n});\r\n\r\nexport const chatSearch = (searchTerm) => ({\r\n  type: SEARCH_USER,\r\n  searchTerm,\r\n});\r\n\r\nexport const sendMsg = (id, chatMsg) => ({\r\n  type: MSG_SUBMIT,\r\n  id,\r\n  chatMsg,\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Divider,\r\n  Box,\r\n} from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Scrollbar from '../../custom-scroll/Scrollbar';\r\nimport CustomTextField from '../../forms/custom-elements/CustomTextField';\r\nimport { openChat, fetchChats, chatSearch } from '../../../redux/chats/Action';\r\n\r\nconst ChatListing = () => {\r\n  const dispatch = useDispatch();\r\n  const activeChat = useSelector((state) => state.chatReducer.chatContent);\r\n  useEffect(() => {\r\n    dispatch(fetchChats());\r\n  }, [dispatch]);\r\n\r\n  const filterChats = (chats, cSearch) => {\r\n    if (chats)\r\n      return chats.filter((t) => t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()));\r\n    return chats;\r\n  };\r\n\r\n  const chats = useSelector((state) =>\r\n    filterChats(state.chatReducer.chats, state.chatReducer.chatSearch),\r\n  );\r\n  return (\r\n    <div>\r\n      <Box\r\n        p={2}\r\n        sx={{\r\n          pt: '21px',\r\n          pb: '21px',\r\n        }}\r\n      >\r\n        <CustomTextField\r\n          id=\"outlined-search\"\r\n          placeholder=\"Search contacts\"\r\n          size=\"small\"\r\n          type=\"search\"\r\n          variant=\"outlined\"\r\n          inputProps={{ 'aria-label': 'Search Contacts' }}\r\n          fullWidth\r\n          onChange={(e) => dispatch(chatSearch(e.target.value))}\r\n        />\r\n      </Box>\r\n      <Divider />\r\n      <List sx={{ height: { lg: 'calc(100vh - 365px)', sm: '100vh' }, p: 1 }}>\r\n        <Scrollbar>\r\n          {chats.map((chat) => (\r\n            <ListItem\r\n              button\r\n              alignItems=\"flex-start\"\r\n              key={chat.id}\r\n              onClick={() => dispatch(openChat(chat.id))}\r\n              selected={activeChat === chat.id}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar alt=\"Remy Sharp\" src={chat.thumb} />\r\n              </ListItemAvatar>\r\n              <ListItemText primary={chat.name} secondary={chat.excerpt} />\r\n            </ListItem>\r\n          ))}\r\n        </Scrollbar>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListing;\r\n","import React from 'react';\r\nimport { Drawer, useMediaQuery } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport ChatListing from './ChatListing';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst ChatSidebar = ({ isMobileSidebarOpen, onSidebarClose }) => {\r\n  const lgUp = useMediaQuery((theme) => theme.breakpoints.up('lg'));\r\n  if (lgUp) {\r\n    return (\r\n      <Drawer\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { position: 'relative' },\r\n        }}\r\n        variant=\"permanent\"\r\n      >\r\n        <ChatListing />\r\n      </Drawer>\r\n    );\r\n  }\r\n  return (\r\n    <Drawer\r\n      open={isMobileSidebarOpen}\r\n      onClose={onSidebarClose}\r\n      variant=\"temporary\"\r\n      sx={{ zIndex: 1, [`& .MuiDrawer-paper`]: { paddingTop: '70px' } }}\r\n    >\r\n      <ChatListing />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nChatSidebar.propTypes = {\r\n  isMobileSidebarOpen: PropTypes.bool,\r\n  onSidebarClose: PropTypes.func,\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography,\r\n  Divider,\r\n  Avatar,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Box,\r\n} from '@mui/material';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport { useSelector } from 'react-redux';\r\nimport Scrollbar from '../../custom-scroll/Scrollbar';\r\n\r\nconst ChatContent = ({ toggleChatSidebar }) => {\r\n  const chatDetails = useSelector(\r\n    (state) => state.chatReducer.chats[state.chatReducer.chatContent - 1],\r\n  );\r\n  return (\r\n    <Box>\r\n      {chatDetails ? (\r\n        <div>\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            p={2}\r\n            sx={{\r\n              pt: '8px',\r\n              pb: '7px',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                display: { xs: 'block', md: 'block', lg: 'none' },\r\n                mr: '10px',\r\n              }}\r\n            >\r\n              <FeatherIcon icon=\"menu\" width=\"18\" onClick={toggleChatSidebar} />\r\n            </Box>\r\n            <ListItem key={chatDetails.id} dense disableGutters>\r\n              <ListItemAvatar>\r\n                <Avatar alt={chatDetails.name} src={chatDetails.thumb} />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={<Typography variant=\"h4\">{chatDetails.name}</Typography>}\r\n                secondary={chatDetails.status}\r\n              />\r\n            </ListItem>\r\n          </Box>\r\n          <Divider />\r\n          <Scrollbar style={{ height: 'calc(100vh - 445px)' }}>\r\n            <Box p={2}>\r\n              {Object.keys(chatDetails.chatHistory).map((chat) =>\r\n                Object.keys(chatDetails.chatHistory[chat]).map((key) =>\r\n                  Object.keys(chatDetails.chatHistory[chat][key]).map((k) =>\r\n                    k === 'from' ? (\r\n                      <Box display=\"flex\" alignItems=\"start   \" flexDirection=\"row\" key={k}>\r\n                        <ListItemAvatar>\r\n                          <Avatar alt={chatDetails.name} src={chatDetails.thumb} />\r\n                        </ListItemAvatar>\r\n                        <div className=\"pl-3\">\r\n                          {chatDetails.chatHistory[chat][key][k].map((v) => (\r\n                            <Box\r\n                              mb={1}\r\n                              key={v}\r\n                              sx={{\r\n                                p: 2,\r\n                                backgroundColor: 'primary.light',\r\n                                borderRadius: '6px',\r\n                                color: (theme) =>\r\n                                  `${\r\n                                    theme.palette.mode === 'dark'\r\n                                      ? 'rgba(0, 0, 0, 0.87)'\r\n                                      : 'rgba(0, 0, 0, 0.87)'\r\n                                  }`,\r\n                              }}\r\n                            >\r\n                              {v}\r\n                            </Box>\r\n                          ))}\r\n                        </div>\r\n                      </Box>\r\n                    ) : (\r\n                      <Box key={k}>\r\n                        {chatDetails.chatHistory[chat][key][k].map((v) => (\r\n                          <Box\r\n                            mb={1}\r\n                            display=\"flex\"\r\n                            alignItems=\"flex-end\"\r\n                            flexDirection=\"row-reverse\"\r\n                            className=\"chat-content\"\r\n                            key={v}\r\n                          >\r\n                            <Box\r\n                              sx={{\r\n                                p: 2,\r\n                                backgroundColor: 'primary.light',\r\n                                ml: 'auto',\r\n                                borderRadius: '6px',\r\n                                color: (theme) =>\r\n                                  `${\r\n                                    theme.palette.mode === 'dark'\r\n                                      ? 'rgba(0, 0, 0, 0.87)'\r\n                                      : 'rgba(0, 0, 0, 0.87)'\r\n                                  }`,\r\n                              }}\r\n                            >\r\n                              {v}\r\n                            </Box>\r\n                          </Box>\r\n                        ))}\r\n                      </Box>\r\n                    ),\r\n                  ),\r\n                ),\r\n              )}\r\n            </Box>\r\n          </Scrollbar>\r\n        </div>\r\n      ) : (\r\n        <Box display=\"flex\" alignItems=\"center\" p={2} pb={1} pt={1}>\r\n          <Box\r\n            sx={{\r\n              display: { xs: 'flex', md: 'flex', lg: 'none' },\r\n              mr: '10px',\r\n            }}\r\n          >\r\n            <FeatherIcon icon=\"menu\" width=\"18\" onClick={toggleChatSidebar} />\r\n          </Box>\r\n          <Typography varient=\"h4\">Select Chat</Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nChatContent.propTypes = {\r\n  toggleChatSidebar: PropTypes.func,\r\n};\r\n\r\nexport default ChatContent;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IconButton, Box } from '@mui/material';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport { sendMsg } from '../../../redux/chats/Action';\r\nimport CustomTextField from '../../forms/custom-elements/CustomTextField';\r\n\r\nconst ChatMsgSent = () => {\r\n  const [msg, setMsg] = useState('');\r\n  const dispatch = useDispatch();\r\n  const id = useSelector((state) => state.chatReducer.chatContent);\r\n  const handleChatMsgChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const onChatMsgSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    dispatch(sendMsg(id, msg));\r\n    setMsg('');\r\n  };\r\n\r\n  return (\r\n    <Box p={2}>\r\n      <form onSubmit={onChatMsgSubmit.bind()} style={{ display: 'flex', alignItems: 'center' }}>\r\n        <CustomTextField\r\n          id=\"msg-sent\"\r\n          fullWidth\r\n          value={msg}\r\n          placeholder=\"Type a Message\"\r\n          size=\"small\"\r\n          type=\"text\"\r\n          variant=\"outlined\"\r\n          inputProps={{ 'aria-label': 'Type a Message' }}\r\n          onChange={handleChatMsgChange.bind(null)}\r\n        />\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            dispatch(sendMsg(id, msg));\r\n            setMsg('');\r\n          }}\r\n          disabled={!msg}\r\n        >\r\n          <FeatherIcon icon=\"send\" width=\"18\" />\r\n        </IconButton>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatMsgSent;\r\n","import React, { useState } from 'react';\r\nimport { Card, Divider, Box } from '@mui/material';\r\nimport Breadcrumb from '../../../layouts/full-layout/breadcrumb/Breadcrumb';\r\nimport PageContainer from '../../../components/container/PageContainer';\r\nimport ChatSidebar from '../../../components/apps/chats/ChatSidebar';\r\nimport ChatContent from '../../../components/apps/chats/ChatContent';\r\nimport ChatMsgSent from '../../../components/apps/chats/ChatMsgSent';\r\n\r\nconst Chats = () => {\r\n  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(true);\r\n\r\n  return (\r\n    <PageContainer title=\"Chat ui\" description=\"this is Chat page\">\r\n      <Breadcrumb title=\"Chat app\" subtitle=\"Messenger\" />\r\n      <Card sx={{ display: 'flex', p: 0 }}>\r\n        <ChatSidebar\r\n          isMobileSidebarOpen={isMobileSidebarOpen}\r\n          onSidebarClose={() => setMobileSidebarOpen(false)}\r\n        />\r\n        <Box flexGrow={1}>\r\n          <ChatContent toggleChatSidebar={() => setMobileSidebarOpen(true)} />\r\n          <Divider />\r\n          <ChatMsgSent />\r\n        </Box>\r\n      </Card>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n"],"sourceRoot":""}